/******************************************************************
 * File: settings_parser.cc
 *
 * This file was automatically generated by CppCC Version 0.0.8
 * DO NOT EDIT MANUALLY
 ******************************************************************/



#include "settings_parser.hh"


#line 113 "settings.cg"
Symbol* cppcc::
#line 16 "settings_parser.cc"
SettingsParser::parse ()
     throw (ScanException, ParseException)
{
#line 115 "settings.cg"
 Symbol* s = new Symbol(""); ;
#line 22 "settings_parser.cc"

  wezel_lub_lisc(
#line 116 "settings.cg"
s);
#line 27 "settings_parser.cc"

  {
#line 117 "settings.cg"
 return s; }
#line 32 "settings_parser.cc"

}


void cppcc::SettingsParser::wezel_lub_lisc (
#line 120 "settings.cg"
Symbol* s)
#line 40 "settings_parser.cc"

     throw (ScanException, ParseException)
{
#line 122 "settings.cg"
 Symbol* w = 0; ;
#line 46 "settings_parser.cc"

  while ((scanner.la()->id == SettingsToken::IDENTIFIER)) {
    if (__la_0_(2147483647)) {
      
#line 124 "settings.cg"
w = 
#line 53 "settings_parser.cc"
wezel();
      {
#line 124 "settings.cg"
 s->AppendChild(w); w=0; }
#line 58 "settings_parser.cc"

    } else { 
      
#line 125 "settings.cg"
w = 
#line 64 "settings_parser.cc"
lisc();
      {
#line 125 "settings.cg"
 s->AppendChild(w); w=0; }
#line 69 "settings_parser.cc"

    }
  }
}



#line 129 "settings.cg"
Symbol* cppcc::
#line 79 "settings_parser.cc"
SettingsParser::lisc ()
     throw (ScanException, ParseException)
{
#line 131 "settings.cg"
 Symbol* s = 0, *sl = 0; ValueList *v; ;
#line 85 "settings_parser.cc"

  
#line 132 "settings.cg"
s = 
#line 90 "settings_parser.cc"
scopedId(
#line 132 "settings.cg"
sl);
#line 94 "settings_parser.cc"

  consumeToken(SettingsToken::ASSIGN);
  
#line 134 "settings.cg"
v = 
#line 100 "settings_parser.cc"
value();
  {
#line 135 "settings.cg"
 sl->AppendVal(v); return s; }
#line 105 "settings_parser.cc"

}



#line 138 "settings.cg"
Symbol* cppcc::
#line 113 "settings_parser.cc"
SettingsParser::wezel ()
     throw (ScanException, ParseException)
{
#line 140 "settings.cg"
 Symbol *s = 0, *sl = 0; ;
#line 119 "settings_parser.cc"

  
#line 141 "settings.cg"
s = 
#line 124 "settings_parser.cc"
scopedId(
#line 141 "settings.cg"
sl);
#line 128 "settings_parser.cc"

  consumeToken(SettingsToken::LBRA);
  wezel_lub_lisc(
#line 143 "settings.cg"
sl);
#line 134 "settings_parser.cc"

  consumeToken(SettingsToken::RBRA);
  {
#line 145 "settings.cg"
 return s; }
#line 140 "settings_parser.cc"

}



#line 148 "settings.cg"
ValueList* cppcc::
#line 148 "settings_parser.cc"
SettingsParser::value ()
     throw (ScanException, ParseException)
{
#line 150 "settings.cg"
 ValueList *v; ;
#line 154 "settings_parser.cc"

  if ((scanner.la()->id == SettingsToken::HEX_CONSTANT) || (scanner.la()->id == SettingsToken::DEC_CONSTANT) || (scanner.la()->id == SettingsToken::FLOAT_CONSTANT) || (scanner.la()->id == SettingsToken::STRING_LITERAL) || (scanner.la()->id == SettingsToken::YES) || (scanner.la()->id == SettingsToken::NO) || (scanner.la()->id == SettingsToken::ON) || (scanner.la()->id == SettingsToken::OFF) || (scanner.la()->id == SettingsToken::TRUE) || (scanner.la()->id == SettingsToken::FALSE)) {
    
#line 151 "settings.cg"
v = 
#line 160 "settings_parser.cc"
simpleValue();
    {
#line 151 "settings.cg"
 return v; }
#line 165 "settings_parser.cc"

  } else { 
    
#line 152 "settings.cg"
v = 
#line 171 "settings_parser.cc"
listValue();
    {
#line 152 "settings.cg"
 return v; }
#line 176 "settings_parser.cc"

  }
}



#line 155 "settings.cg"
ValueList* cppcc::
#line 185 "settings_parser.cc"
SettingsParser::simpleValue ()
     throw (ScanException, ParseException)
{
#line 156 "settings.cg"
 ValueList *v; ;
#line 191 "settings_parser.cc"

  if ((scanner.la()->id == SettingsToken::HEX_CONSTANT)) {
    consumeToken(SettingsToken::HEX_CONSTANT);
    {
#line 157 "settings.cg"
 return new ValueList( atol(token->image().c_str()) ); }
#line 198 "settings_parser.cc"

  } else { 
    if ((scanner.la()->id == SettingsToken::DEC_CONSTANT)) {
      consumeToken(SettingsToken::DEC_CONSTANT);
      {
#line 158 "settings.cg"
 return new ValueList( atol(token->image().c_str()) ); }
#line 206 "settings_parser.cc"

    } else { 
      if ((scanner.la()->id == SettingsToken::FLOAT_CONSTANT)) {
        consumeToken(SettingsToken::FLOAT_CONSTANT);
        {
#line 159 "settings.cg"
 return new ValueList( atof(token->image().c_str()) ); }
#line 214 "settings_parser.cc"

      } else { 
        if ((scanner.la()->id == SettingsToken::STRING_LITERAL)) {
          consumeToken(SettingsToken::STRING_LITERAL);
          {
#line 160 "settings.cg"
 return new ValueList( token->image().substr(1,token->image().length()-2) ); }
#line 222 "settings_parser.cc"

        } else { 
          
#line 161 "settings.cg"
v = 
#line 228 "settings_parser.cc"
booleanConstant();
          {
#line 161 "settings.cg"
 return v; }
#line 233 "settings_parser.cc"

        }
      }
    }
  }
}



#line 164 "settings.cg"
ValueList* cppcc::
#line 245 "settings_parser.cc"
SettingsParser::booleanConstant ()
     throw (ScanException, ParseException)
{
  if ((scanner.la()->id == SettingsToken::YES)) {
    consumeToken(SettingsToken::YES);
    {
#line 166 "settings.cg"
 return new ValueList(true); }
#line 254 "settings_parser.cc"

  } else { 
    if ((scanner.la()->id == SettingsToken::NO)) {
      consumeToken(SettingsToken::NO);
      {
#line 167 "settings.cg"
 return new ValueList(false); }
#line 262 "settings_parser.cc"

    } else { 
      if ((scanner.la()->id == SettingsToken::ON)) {
        consumeToken(SettingsToken::ON);
        {
#line 168 "settings.cg"
 return new ValueList(true); }
#line 270 "settings_parser.cc"

      } else { 
        if ((scanner.la()->id == SettingsToken::OFF)) {
          consumeToken(SettingsToken::OFF);
          {
#line 169 "settings.cg"
 return new ValueList(false); }
#line 278 "settings_parser.cc"

        } else { 
          if ((scanner.la()->id == SettingsToken::TRUE)) {
            consumeToken(SettingsToken::TRUE);
            {
#line 170 "settings.cg"
 return new ValueList(true); }
#line 286 "settings_parser.cc"

          } else { 
            consumeToken(SettingsToken::FALSE);
            {
#line 171 "settings.cg"
 return new ValueList(false); }
#line 293 "settings_parser.cc"

          }
        }
      }
    }
  }
}



#line 174 "settings.cg"
ValueList* cppcc::
#line 306 "settings_parser.cc"
SettingsParser::listValue ()
     throw (ScanException, ParseException)
{
#line 176 "settings.cg"
 ValueList *v,*v2; ;
#line 312 "settings_parser.cc"

  consumeToken(SettingsToken::LPAR);
  
#line 178 "settings.cg"
v = 
#line 318 "settings_parser.cc"
simpleValue();
  while ((scanner.la()->id == SettingsToken::COMMA)) {
    consumeToken(SettingsToken::COMMA);
    
#line 180 "settings.cg"
v2 = 
#line 325 "settings_parser.cc"
simpleValue();
    {
#line 180 "settings.cg"
 v->Append(v2); delete v2; }
#line 330 "settings_parser.cc"

  }
  consumeToken(SettingsToken::RPAR);
  {
#line 183 "settings.cg"
 return v; }
#line 337 "settings_parser.cc"

}



#line 186 "settings.cg"
Symbol* cppcc::
#line 345 "settings_parser.cc"
SettingsParser::scopedId (
#line 186 "settings.cg"
Symbol* &last)
#line 349 "settings_parser.cc"

     throw (ScanException, ParseException)
{
#line 188 "settings.cg"
 Symbol *s = 0, *s2; last = 0; ;
#line 355 "settings_parser.cc"

  consumeToken(SettingsToken::IDENTIFIER);
  {
#line 189 "settings.cg"
 last = new Symbol(token->image()); s = last; }
#line 361 "settings_parser.cc"

  while ((scanner.la()->id == SettingsToken::DOT)) {
    consumeToken(SettingsToken::DOT);
    consumeToken(SettingsToken::IDENTIFIER);
    {
#line 191 "settings.cg"
 s2 = new Symbol(token->image()); last->AppendChild( s2 ); last = s2; }
#line 369 "settings_parser.cc"

  }
  {
#line 193 "settings.cg"
 return s; }
#line 375 "settings_parser.cc"

}



#line 196 "settings.cg"
Symbol* cppcc::
#line 383 "settings_parser.cc"
SettingsParser::extract (
#line 196 "settings.cg"
Symbol* src)
#line 387 "settings_parser.cc"

     throw (ScanException, ParseException)
{
#line 197 "settings.cg"
 Symbol *s = src;
			Symbol::ChildList* clist;
			int cidx;
			if( 0 == s ) return 0;
		;
#line 397 "settings_parser.cc"

  
#line 203 "settings.cg"
clist = 
#line 402 "settings_parser.cc"
find(
#line 203 "settings.cg"
s,cidx);
#line 406 "settings_parser.cc"

  {
#line 205 "settings.cg"

			if( 0 == clist )
				return 0;	//nie znaleziono dzieciaka

			Symbol *ret;
			ret = new Symbol(true);		//przechowywane beda wskazniki na dzieciaki juz istniejace na jakiejs liscie, wiec nie nalezy ich niszczyc
			if( cidx >= 0 ) {
				// jest wskazanie na konkretnego dzieciaka
				ret->AppendChild(clist->at(cidx));
			} else {
				// nie ma wskazania na konkretnego dzieciaka, wiec przepisujemy cala liste
				int i,len = clist->size();
				for( i = 0; i < len; ++i )
					ret->AppendChild(clist->at(i));
			}
			return ret;
		}
#line 427 "settings_parser.cc"

}



#line 224 "settings.cg"
Symbol::ChildList* cppcc::
#line 435 "settings_parser.cc"
SettingsParser::find (
#line 224 "settings.cg"
Symbol* src, int &child_index)
#line 439 "settings_parser.cc"

     throw (ScanException, ParseException)
{
#line 225 "settings.cg"
 Symbol *s = src;
			Symbol::ChildList* clist;
			int cidx;
			if( 0 == s ) return 0;
		;
#line 449 "settings_parser.cc"

  if ((scanner.la()->id == SettingsToken::LSQR) || (scanner.la()->id == SettingsToken::IDENTIFIER)) {
    
#line 231 "settings.cg"
clist = 
#line 455 "settings_parser.cc"
oneStepOnPath(
#line 231 "settings.cg"
s,cidx);
#line 459 "settings_parser.cc"

    {
#line 231 "settings.cg"
 if( 0==clist ) return 0;	//nie znaleziono dzieciaka
																				}
#line 465 "settings_parser.cc"

    while ((scanner.la()->id == SettingsToken::DOT)) {
      consumeToken(SettingsToken::DOT);
      {
#line 233 "settings.cg"
 if( cidx<0 ) {						//nie wskazano indeksu dzieciaka
																						if( clist->size() > 1 )
																							return 0;							//jest proba dostepu do dzieciaka, a ten nie jest jednoznaczny
																						cidx = 0;
																					}
																					s = clist->at(cidx);
																				}
#line 478 "settings_parser.cc"

      
#line 240 "settings.cg"
clist = 
#line 483 "settings_parser.cc"
oneStepOnPath(
#line 240 "settings.cg"
s,cidx);
#line 487 "settings_parser.cc"

      {
#line 240 "settings.cg"
 if( 0==clist ) return 0;	//nie znaleziono dzieciaka
																				}
#line 493 "settings_parser.cc"

    }
    {
#line 243 "settings.cg"
	child_index = cidx;
				return clist;
			}
#line 501 "settings_parser.cc"

  } else { 
    consumeToken(SettingsToken::DOT);
    {
#line 248 "settings.cg"
	clist = s->GetChilds();
																					if( 0==clist ) return 0;	//nie znaleziono dzieciaka
																					if( clist->size() > 1 )
																						return 0;								//jest proba dostepu do dzieciaka, a ten nie jest jednoznaczny
																					s = clist->at(0);					//biezrzemy pierwszego dzieciaka
																				}
#line 513 "settings_parser.cc"

    
#line 254 "settings.cg"
clist = 
#line 518 "settings_parser.cc"
oneStepOnPath(
#line 254 "settings.cg"
s,cidx);
#line 522 "settings_parser.cc"

    {
#line 254 "settings.cg"
 if( 0==clist ) return 0;	//nie znaleziono dzieciaka
																				}
#line 528 "settings_parser.cc"

    while ((scanner.la()->id == SettingsToken::DOT)) {
      consumeToken(SettingsToken::DOT);
      {
#line 257 "settings.cg"
 if( cidx<0 ) {						//nie wskazano indeksu dzieciaka
																						if( clist->size() > 1 )
																							return 0;							//jest proba dostepu do dzieciaka, a ten nie jest jednoznaczny
																						cidx = 0;
																					}
																					s = clist->at(cidx);
																				}
#line 541 "settings_parser.cc"

      
#line 264 "settings.cg"
clist = 
#line 546 "settings_parser.cc"
oneStepOnPath(
#line 264 "settings.cg"
s,cidx);
#line 550 "settings_parser.cc"

      {
#line 264 "settings.cg"
 if( 0==clist ) return 0;	//nie znaleziono dzieciaka
																				}
#line 556 "settings_parser.cc"

    }
    {
#line 268 "settings.cg"
	child_index = cidx;
				return clist;
			}
#line 564 "settings_parser.cc"

  }
}



#line 274 "settings.cg"
Symbol::ChildList* cppcc::
#line 573 "settings_parser.cc"
SettingsParser::oneStepOnPath (
#line 274 "settings.cg"
Symbol* src,int &idx)
#line 577 "settings_parser.cc"

     throw (ScanException, ParseException)
{
#line 275 "settings.cg"
 if( 0 == src ) return 0;
			idx = -1;
			Symbol::ChildList* clist = 0;
			int ccnt = -1;
		;
#line 587 "settings_parser.cc"

  if ((scanner.la()->id == SettingsToken::IDENTIFIER)) {
    consumeToken(SettingsToken::IDENTIFIER);
    {
#line 281 "settings.cg"
 clist = src->GetChilds(token->image());
														if( 0==clist ) {
															return 0;
														}
													}
#line 598 "settings_parser.cc"

    if ((scanner.la()->id == SettingsToken::LSQR)) {
      consumeToken(SettingsToken::LSQR);
      consumeToken(SettingsToken::DEC_CONSTANT);
      {
#line 287 "settings.cg"
 ccnt = atol(token->image().c_str()) - 1;
														if( ccnt < 0 || ccnt >= clist->size() ) return 0;	//indeks poza zakresem
													}
#line 608 "settings_parser.cc"

      consumeToken(SettingsToken::RSQR);
    } else { 
       /* lambda */
    }
    {
#line 292 "settings.cg"
 idx = ccnt;
				return clist;
			}
#line 619 "settings_parser.cc"

  } else { 
    consumeToken(SettingsToken::LSQR);
    {
#line 298 "settings.cg"
	clist = src->GetChilds();
													if( 0==clist ) {
														return 0;
													}
												}
#line 630 "settings_parser.cc"

    consumeToken(SettingsToken::DEC_CONSTANT);
    {
#line 303 "settings.cg"
 ccnt = atol(token->image().c_str()) - 1;
													if( ccnt < 0 || ccnt >= clist->size() ) return 0;	//indeks poza zakresem
												}
#line 638 "settings_parser.cc"

    consumeToken(SettingsToken::RSQR);
    {
#line 307 "settings.cg"
 idx = ccnt;
				return clist;
			}
#line 646 "settings_parser.cc"

  }
}


bool cppcc::SettingsParser::__la_parse_ () throw (ScanException)
{
  if (!__la_wezel_lub_lisc_()) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  
  __lookahead_succeed_:
    return true;
    
  __lookahead_fail_:
    return false;
}


bool cppcc::SettingsParser::__la_wezel_lub_lisc_ () throw (ScanException)
{
  while ((scanner.la()->id == SettingsToken::IDENTIFIER)) {
    if (__la_0_(2147483647)) {
      if (!__la_wezel_()) goto __lookahead_fail_;
      if (_la == 0) goto __lookahead_succeed_;
    } else { 
      if (!__la_lisc_()) goto __lookahead_fail_;
      if (_la == 0) goto __lookahead_succeed_;
    }
  }
  
  __lookahead_succeed_:
    return true;
    
  __lookahead_fail_:
    return false;
}


bool cppcc::SettingsParser::__la_0_ (int depth) throw (ScanException)
{
  int _laSave = _la;
  _la = depth;
  scanner.setMarker();
  
  if (!__la_wezel_()) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  goto __lookahead_succeed_;
  
__lookahead_fail_:
  _la = _laSave;
  scanner.rewindToMarker();
  return false;

__lookahead_succeed_:
  _la = _laSave;
  scanner.rewindToMarker();
  return true;
}


bool cppcc::SettingsParser::__la_lisc_ () throw (ScanException)
{
  if (!__la_scopedId_()) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  if (!laConsumeToken(SettingsToken::ASSIGN)) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  if (!__la_value_()) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  
  __lookahead_succeed_:
    return true;
    
  __lookahead_fail_:
    return false;
}


bool cppcc::SettingsParser::__la_wezel_ () throw (ScanException)
{
  if (!__la_scopedId_()) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  if (!laConsumeToken(SettingsToken::LBRA)) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  if (!__la_wezel_lub_lisc_()) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  if (!laConsumeToken(SettingsToken::RBRA)) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  
  __lookahead_succeed_:
    return true;
    
  __lookahead_fail_:
    return false;
}


bool cppcc::SettingsParser::__la_value_ () throw (ScanException)
{
  if ((scanner.la()->id == SettingsToken::HEX_CONSTANT) || (scanner.la()->id == SettingsToken::DEC_CONSTANT) || (scanner.la()->id == SettingsToken::FLOAT_CONSTANT) || (scanner.la()->id == SettingsToken::STRING_LITERAL) || (scanner.la()->id == SettingsToken::YES) || (scanner.la()->id == SettingsToken::NO) || (scanner.la()->id == SettingsToken::ON) || (scanner.la()->id == SettingsToken::OFF) || (scanner.la()->id == SettingsToken::TRUE) || (scanner.la()->id == SettingsToken::FALSE)) {
    if (!__la_simpleValue_()) goto __lookahead_fail_;
    if (_la == 0) goto __lookahead_succeed_;
  } else { 
    if (!__la_listValue_()) goto __lookahead_fail_;
    if (_la == 0) goto __lookahead_succeed_;
  }
  
  __lookahead_succeed_:
    return true;
    
  __lookahead_fail_:
    return false;
}


bool cppcc::SettingsParser::__la_simpleValue_ () throw (ScanException)
{
  if ((scanner.la()->id == SettingsToken::HEX_CONSTANT)) {
    if (!laConsumeToken(SettingsToken::HEX_CONSTANT)) goto __lookahead_fail_;
    if (_la == 0) goto __lookahead_succeed_;
  } else { 
    if ((scanner.la()->id == SettingsToken::DEC_CONSTANT)) {
      if (!laConsumeToken(SettingsToken::DEC_CONSTANT)) goto __lookahead_fail_;
      if (_la == 0) goto __lookahead_succeed_;
    } else { 
      if ((scanner.la()->id == SettingsToken::FLOAT_CONSTANT)) {
        if (!laConsumeToken(SettingsToken::FLOAT_CONSTANT)) goto __lookahead_fail_;
        if (_la == 0) goto __lookahead_succeed_;
      } else { 
        if ((scanner.la()->id == SettingsToken::STRING_LITERAL)) {
          if (!laConsumeToken(SettingsToken::STRING_LITERAL)) goto __lookahead_fail_;
          if (_la == 0) goto __lookahead_succeed_;
        } else { 
          if (!__la_booleanConstant_()) goto __lookahead_fail_;
          if (_la == 0) goto __lookahead_succeed_;
        }
      }
    }
  }
  
  __lookahead_succeed_:
    return true;
    
  __lookahead_fail_:
    return false;
}


bool cppcc::SettingsParser::__la_booleanConstant_ () throw (ScanException)
{
  if ((scanner.la()->id == SettingsToken::YES)) {
    if (!laConsumeToken(SettingsToken::YES)) goto __lookahead_fail_;
    if (_la == 0) goto __lookahead_succeed_;
  } else { 
    if ((scanner.la()->id == SettingsToken::NO)) {
      if (!laConsumeToken(SettingsToken::NO)) goto __lookahead_fail_;
      if (_la == 0) goto __lookahead_succeed_;
    } else { 
      if ((scanner.la()->id == SettingsToken::ON)) {
        if (!laConsumeToken(SettingsToken::ON)) goto __lookahead_fail_;
        if (_la == 0) goto __lookahead_succeed_;
      } else { 
        if ((scanner.la()->id == SettingsToken::OFF)) {
          if (!laConsumeToken(SettingsToken::OFF)) goto __lookahead_fail_;
          if (_la == 0) goto __lookahead_succeed_;
        } else { 
          if ((scanner.la()->id == SettingsToken::TRUE)) {
            if (!laConsumeToken(SettingsToken::TRUE)) goto __lookahead_fail_;
            if (_la == 0) goto __lookahead_succeed_;
          } else { 
            if (!laConsumeToken(SettingsToken::FALSE)) goto __lookahead_fail_;
            if (_la == 0) goto __lookahead_succeed_;
          }
        }
      }
    }
  }
  
  __lookahead_succeed_:
    return true;
    
  __lookahead_fail_:
    return false;
}


bool cppcc::SettingsParser::__la_listValue_ () throw (ScanException)
{
  if (!laConsumeToken(SettingsToken::LPAR)) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  if (!__la_simpleValue_()) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  while ((scanner.la()->id == SettingsToken::COMMA)) {
    if (!laConsumeToken(SettingsToken::COMMA)) goto __lookahead_fail_;
    if (_la == 0) goto __lookahead_succeed_;
    if (!__la_simpleValue_()) goto __lookahead_fail_;
    if (_la == 0) goto __lookahead_succeed_;
  }
  if (!laConsumeToken(SettingsToken::RPAR)) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  
  __lookahead_succeed_:
    return true;
    
  __lookahead_fail_:
    return false;
}


bool cppcc::SettingsParser::__la_scopedId_ () throw (ScanException)
{
  if (!laConsumeToken(SettingsToken::IDENTIFIER)) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  while ((scanner.la()->id == SettingsToken::DOT)) {
    if (!laConsumeToken(SettingsToken::DOT)) goto __lookahead_fail_;
    if (_la == 0) goto __lookahead_succeed_;
    if (!laConsumeToken(SettingsToken::IDENTIFIER)) goto __lookahead_fail_;
    if (_la == 0) goto __lookahead_succeed_;
  }
  
  __lookahead_succeed_:
    return true;
    
  __lookahead_fail_:
    return false;
}


bool cppcc::SettingsParser::__la_extract_ () throw (ScanException)
{
  if (!__la_find_()) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  
  __lookahead_succeed_:
    return true;
    
  __lookahead_fail_:
    return false;
}


bool cppcc::SettingsParser::__la_find_ () throw (ScanException)
{
  if ((scanner.la()->id == SettingsToken::LSQR) || (scanner.la()->id == SettingsToken::IDENTIFIER)) {
    if (!__la_oneStepOnPath_()) goto __lookahead_fail_;
    if (_la == 0) goto __lookahead_succeed_;
    while ((scanner.la()->id == SettingsToken::DOT)) {
      if (!laConsumeToken(SettingsToken::DOT)) goto __lookahead_fail_;
      if (_la == 0) goto __lookahead_succeed_;
      if (!__la_oneStepOnPath_()) goto __lookahead_fail_;
      if (_la == 0) goto __lookahead_succeed_;
    }
  } else { 
    if (!laConsumeToken(SettingsToken::DOT)) goto __lookahead_fail_;
    if (_la == 0) goto __lookahead_succeed_;
    if (!__la_oneStepOnPath_()) goto __lookahead_fail_;
    if (_la == 0) goto __lookahead_succeed_;
    while ((scanner.la()->id == SettingsToken::DOT)) {
      if (!laConsumeToken(SettingsToken::DOT)) goto __lookahead_fail_;
      if (_la == 0) goto __lookahead_succeed_;
      if (!__la_oneStepOnPath_()) goto __lookahead_fail_;
      if (_la == 0) goto __lookahead_succeed_;
    }
  }
  
  __lookahead_succeed_:
    return true;
    
  __lookahead_fail_:
    return false;
}


bool cppcc::SettingsParser::__la_oneStepOnPath_ () throw (ScanException)
{
  if ((scanner.la()->id == SettingsToken::IDENTIFIER)) {
    if (!laConsumeToken(SettingsToken::IDENTIFIER)) goto __lookahead_fail_;
    if (_la == 0) goto __lookahead_succeed_;
    if ((scanner.la()->id == SettingsToken::LSQR)) {
      if (!laConsumeToken(SettingsToken::LSQR)) goto __lookahead_fail_;
      if (_la == 0) goto __lookahead_succeed_;
      if (!laConsumeToken(SettingsToken::DEC_CONSTANT)) goto __lookahead_fail_;
      if (_la == 0) goto __lookahead_succeed_;
      if (!laConsumeToken(SettingsToken::RSQR)) goto __lookahead_fail_;
      if (_la == 0) goto __lookahead_succeed_;
    } else { 
       /* lambda */
    }
  } else { 
    if (!laConsumeToken(SettingsToken::LSQR)) goto __lookahead_fail_;
    if (_la == 0) goto __lookahead_succeed_;
    if (!laConsumeToken(SettingsToken::DEC_CONSTANT)) goto __lookahead_fail_;
    if (_la == 0) goto __lookahead_succeed_;
    if (!laConsumeToken(SettingsToken::RSQR)) goto __lookahead_fail_;
    if (_la == 0) goto __lookahead_succeed_;
  }
  
  __lookahead_succeed_:
    return true;
    
  __lookahead_fail_:
    return false;
}





/* End of file. */
