/******************************************************************
 * File: alan_parser.hh
 *
 * This file was automatically generated by CppCC Version 0.0.8
 * DO NOT EDIT MANUALLY
 ******************************************************************/


#ifndef __ALAN_PARSER_HH__
#define __ALAN_PARSER_HH__

#include <iostream>
#include <string>
#include <exception>

#include "alan_token.hh"
#include "alan_scanner.hh"
namespace cppcc
{

class ParseException : public std::exception
{
  public:
    
    ParseException (const std::string &message_ = "Parse exception") :
      message(message_)
    {}
    
    ParseException (const Position &pos_,
                   const std::string &message_ = "Parse exception") :
      pos(pos_), message(message_)
    {}
    
    ~ParseException () throw ()
    {}
    
    virtual operator std::string () const
    {
      return std::string(pos) + ": " + message;
    }
    
    virtual const char* what () throw ()
    {
      return message.c_str();
    }
    
    virtual Position& where () throw ()
    {
      return pos;
    }
    
  private:
  
    Position pos;
    std::string message;
}; // end class PasreException


class AlanParser_base
{
  protected:
    bool onParseError (ParseException &pex) { return false; }
};


class AlanParser : public AlanParser_base
{
  public: // methods
    
    AlanParser (std::istream *in_ = NULL) throw (ScanException, ParseException) :
       scanner(in_), _la(0)
    {}
    
    // productions entry points:
    
    
#line 129 "ALan.cg"
AlanCode*
#line 80 "alan_parser.hh"

     parse ()
       throw (
#line 129 "ALan.cg"
AlanException, 
#line 86 "alan_parser.hh"
ScanException, ParseException);
    void
     lista_instrukcji ()
       throw (
#line 137 "ALan.cg"
AlanException, 
#line 93 "alan_parser.hh"
ScanException, ParseException);
    void
     label ()
       throw (
#line 145 "ALan.cg"
AlanException, 
#line 100 "alan_parser.hh"
ScanException, ParseException);
    void
     pojedyncza_instrukcja ()
       throw (
#line 152 "ALan.cg"
AlanException, 
#line 107 "alan_parser.hh"
ScanException, ParseException);
    void
     declaration ()
       throw (
#line 172 "ALan.cg"
AlanException, 
#line 114 "alan_parser.hh"
ScanException, ParseException);
    
#line 179 "ALan.cg"
char
#line 119 "alan_parser.hh"

     typeID ()
       throw (
#line 179 "ALan.cg"
AlanException, 
#line 125 "alan_parser.hh"
ScanException, ParseException);
    void
     declVarList (
#line 187 "ALan.cg"
char type)
#line 131 "alan_parser.hh"

       throw (
#line 187 "ALan.cg"
AlanException, 
#line 136 "alan_parser.hh"
ScanException, ParseException);
    void
     declVar (
#line 194 "ALan.cg"
char type)
#line 142 "alan_parser.hh"

       throw (
#line 194 "ALan.cg"
AlanException, 
#line 147 "alan_parser.hh"
ScanException, ParseException);
    
#line 204 "ALan.cg"
AlanVariable*
#line 152 "alan_parser.hh"

     Variable ()
       throw (
#line 204 "ALan.cg"
AlanException, 
#line 158 "alan_parser.hh"
ScanException, ParseException);
    void
     instr_move ()
       throw (
#line 215 "ALan.cg"
AlanException, 
#line 165 "alan_parser.hh"
ScanException, ParseException);
    void
     instr_anim ()
       throw (
#line 275 "ALan.cg"
AlanException, 
#line 172 "alan_parser.hh"
ScanException, ParseException);
    void
     instr_scale ()
       throw (
#line 307 "ALan.cg"
AlanException, 
#line 179 "alan_parser.hh"
ScanException, ParseException);
    void
     instr_goto ()
       throw (
#line 347 "ALan.cg"
AlanException, 
#line 186 "alan_parser.hh"
ScanException, ParseException);
    void
     instr_gosub ()
       throw (
#line 356 "ALan.cg"
AlanException, 
#line 193 "alan_parser.hh"
ScanException, ParseException);
    void
     instr_return ()
       throw (
#line 365 "ALan.cg"
AlanException, 
#line 200 "alan_parser.hh"
ScanException, ParseException);
    void
     instr_let ()
       throw (
#line 370 "ALan.cg"
AlanException, 
#line 207 "alan_parser.hh"
ScanException, ParseException);
    void
     instr_for ()
       throw (
#line 386 "ALan.cg"
AlanException, 
#line 214 "alan_parser.hh"
ScanException, ParseException);
    void
     instr_next ()
       throw (
#line 406 "ALan.cg"
AlanException, 
#line 221 "alan_parser.hh"
ScanException, ParseException);
    void
     instr_while ()
       throw (
#line 412 "ALan.cg"
AlanException, 
#line 228 "alan_parser.hh"
ScanException, ParseException);
    void
     instr_wend ()
       throw (
#line 423 "ALan.cg"
AlanException, 
#line 235 "alan_parser.hh"
ScanException, ParseException);
    void
     instr_if ()
       throw (
#line 429 "ALan.cg"
AlanException, 
#line 242 "alan_parser.hh"
ScanException, ParseException);
    void
     instr_else ()
       throw (
#line 438 "ALan.cg"
AlanException, 
#line 249 "alan_parser.hh"
ScanException, ParseException);
    void
     instr_eif ()
       throw (
#line 444 "ALan.cg"
AlanException, 
#line 256 "alan_parser.hh"
ScanException, ParseException);
    void
     instr_pause ()
       throw (
#line 450 "ALan.cg"
AlanException, 
#line 263 "alan_parser.hh"
ScanException, ParseException);
    
#line 465 "ALan.cg"
AlanExpr*
#line 268 "alan_parser.hh"

     buildinFunc ()
       throw (
#line 465 "ALan.cg"
AlanException, 
#line 274 "alan_parser.hh"
ScanException, ParseException);
    
#line 693 "ALan.cg"
AlanExpr*
#line 279 "alan_parser.hh"

     primaryExpr ()
       throw (
#line 693 "ALan.cg"
AlanException, 
#line 285 "alan_parser.hh"
ScanException, ParseException);
    
#line 702 "ALan.cg"
AlanExpr*
#line 290 "alan_parser.hh"

     unaryExpr ()
       throw (
#line 702 "ALan.cg"
AlanException, 
#line 296 "alan_parser.hh"
ScanException, ParseException);
    
#line 710 "ALan.cg"
AlanExpr*
#line 301 "alan_parser.hh"

     castExpr ()
       throw (
#line 710 "ALan.cg"
AlanException, 
#line 307 "alan_parser.hh"
ScanException, ParseException);
    
#line 720 "ALan.cg"
AlanExpr*
#line 312 "alan_parser.hh"

     multiplicativeExpr ()
       throw (
#line 720 "ALan.cg"
AlanException, 
#line 318 "alan_parser.hh"
ScanException, ParseException);
    
#line 759 "ALan.cg"
AlanExpr*
#line 323 "alan_parser.hh"

     additiveExpr ()
       throw (
#line 759 "ALan.cg"
AlanException, 
#line 329 "alan_parser.hh"
ScanException, ParseException);
    
#line 787 "ALan.cg"
AlanExpr*
#line 334 "alan_parser.hh"

     relExpr ()
       throw (
#line 787 "ALan.cg"
AlanException, 
#line 340 "alan_parser.hh"
ScanException, ParseException);
    
#line 815 "ALan.cg"
int
#line 345 "alan_parser.hh"

     RelOp2 (
#line 815 "ALan.cg"
string& tok)
#line 350 "alan_parser.hh"

       throw (
#line 815 "ALan.cg"
AlanException, 
#line 355 "alan_parser.hh"
ScanException, ParseException);
    
#line 825 "ALan.cg"
AlanExpr*
#line 360 "alan_parser.hh"

     unaryBoolExpr ()
       throw (
#line 825 "ALan.cg"
AlanException, 
#line 366 "alan_parser.hh"
ScanException, ParseException);
    
#line 834 "ALan.cg"
AlanExpr*
#line 371 "alan_parser.hh"

     mulBoolExpr ()
       throw (
#line 834 "ALan.cg"
AlanException, 
#line 377 "alan_parser.hh"
ScanException, ParseException);
    
#line 846 "ALan.cg"
AlanExpr*
#line 382 "alan_parser.hh"

     addBoolExpr ()
       throw (
#line 846 "ALan.cg"
AlanException, 
#line 388 "alan_parser.hh"
ScanException, ParseException);
    
#line 858 "ALan.cg"
AlanExpr*
#line 393 "alan_parser.hh"

     Expr ()
       throw (
#line 858 "ALan.cg"
AlanException, 
#line 399 "alan_parser.hh"
ScanException, ParseException);
    
#line 864 "ALan.cg"
float
#line 404 "alan_parser.hh"

     FloatConstant ()
       throw (
#line 864 "ALan.cg"
AlanException, 
#line 410 "alan_parser.hh"
ScanException, ParseException);
    
#line 869 "ALan.cg"
int
#line 415 "alan_parser.hh"

     DecConstant ()
       throw (
#line 869 "ALan.cg"
AlanException, 
#line 421 "alan_parser.hh"
ScanException, ParseException);
    
#line 874 "ALan.cg"
bool
#line 426 "alan_parser.hh"

     BoolConstant ()
       throw (
#line 874 "ALan.cg"
AlanException, 
#line 432 "alan_parser.hh"
ScanException, ParseException);
    
#line 880 "ALan.cg"
string
#line 437 "alan_parser.hh"

     StringConstant ()
       throw (
#line 880 "ALan.cg"
AlanException, 
#line 443 "alan_parser.hh"
ScanException, ParseException);
    
#line 885 "ALan.cg"
AlanExpr*
#line 448 "alan_parser.hh"

     Constant ()
       throw (
#line 885 "ALan.cg"
AlanException, 
#line 454 "alan_parser.hh"
ScanException, ParseException);
    
    // productions LA methods:
    
    bool __la_parse_ () throw (ScanException);
    bool __la_lista_instrukcji_ () throw (ScanException);
    bool __la_label_ () throw (ScanException);
    bool __la_pojedyncza_instrukcja_ () throw (ScanException);
    bool __la_declaration_ () throw (ScanException);
    bool __la_typeID_ () throw (ScanException);
    bool __la_declVarList_ () throw (ScanException);
    bool __la_declVar_ () throw (ScanException);
    bool __la_Variable_ () throw (ScanException);
    bool __la_instr_move_ () throw (ScanException);
    bool __la_instr_anim_ () throw (ScanException);
    bool __la_instr_scale_ () throw (ScanException);
    bool __la_instr_goto_ () throw (ScanException);
    bool __la_instr_gosub_ () throw (ScanException);
    bool __la_instr_return_ () throw (ScanException);
    bool __la_instr_let_ () throw (ScanException);
    bool __la_instr_for_ () throw (ScanException);
    bool __la_instr_next_ () throw (ScanException);
    bool __la_instr_while_ () throw (ScanException);
    bool __la_instr_wend_ () throw (ScanException);
    bool __la_instr_if_ () throw (ScanException);
    bool __la_instr_else_ () throw (ScanException);
    bool __la_instr_eif_ () throw (ScanException);
    bool __la_instr_pause_ () throw (ScanException);
    bool __la_buildinFunc_ () throw (ScanException);
    bool __la_primaryExpr_ () throw (ScanException);
    bool __la_unaryExpr_ () throw (ScanException);
    bool __la_castExpr_ () throw (ScanException);
    bool __la_multiplicativeExpr_ () throw (ScanException);
    bool __la_additiveExpr_ () throw (ScanException);
    bool __la_relExpr_ () throw (ScanException);
    bool __la_RelOp2_ () throw (ScanException);
    bool __la_unaryBoolExpr_ () throw (ScanException);
    bool __la_mulBoolExpr_ () throw (ScanException);
    bool __la_addBoolExpr_ () throw (ScanException);
    bool __la_Expr_ () throw (ScanException);
    bool __la_FloatConstant_ () throw (ScanException);
    bool __la_DecConstant_ () throw (ScanException);
    bool __la_BoolConstant_ () throw (ScanException);
    bool __la_StringConstant_ () throw (ScanException);
    bool __la_Constant_ () throw (ScanException);
    
    // lookahead entry points:
    
    // LA entry points for parse
    
    // LA entry points for lista_instrukcji
    
    bool __la_0_ (int depth) throw (ScanException);
    // LA entry points for label
    
    // LA entry points for pojedyncza_instrukcja
    
    // LA entry points for declaration
    
    // LA entry points for typeID
    
    // LA entry points for declVarList
    
    // LA entry points for declVar
    
    // LA entry points for Variable
    
    // LA entry points for instr_move
    
    // LA entry points for instr_anim
    
    // LA entry points for instr_scale
    
    // LA entry points for instr_goto
    
    // LA entry points for instr_gosub
    
    // LA entry points for instr_return
    
    // LA entry points for instr_let
    
    // LA entry points for instr_for
    
    // LA entry points for instr_next
    
    // LA entry points for instr_while
    
    // LA entry points for instr_wend
    
    // LA entry points for instr_if
    
    // LA entry points for instr_else
    
    // LA entry points for instr_eif
    
    // LA entry points for instr_pause
    
    bool __la_1_ (int depth) throw (ScanException);
    // LA entry points for buildinFunc
    
    // LA entry points for primaryExpr
    
    // LA entry points for unaryExpr
    
    // LA entry points for castExpr
    
    // LA entry points for multiplicativeExpr
    
    // LA entry points for additiveExpr
    
    // LA entry points for relExpr
    
    // LA entry points for RelOp2
    
    // LA entry points for unaryBoolExpr
    
    // LA entry points for mulBoolExpr
    
    // LA entry points for addBoolExpr
    
    // LA entry points for Expr
    
    // LA entry points for FloatConstant
    
    // LA entry points for DecConstant
    
    // LA entry points for BoolConstant
    
    // LA entry points for StringConstant
    
    // LA entry points for Constant
    
    
    
  private: // methods
    
    void consumeToken (int tId)  throw (ScanException, ParseException)
    {
      if ((token = scanner.la())->id != tId)
      {
        ParseException pex(scanner.la()->bPos, "Parse error.");
        if (!onParseError(pex)) throw pex;
      }
      scanner.unchecked_consume();
    }
    
    bool laConsumeToken (int tId)  throw (ScanException, ParseException)
    {
      if (scanner.la()->id != tId) return false;
      scanner.unchecked_consume();
      return true;
    }
    
  public: // data
    
    AlanScanner scanner;
    int _la;
    AlanToken *token;
    
  private: // user code
  
#line 127 "ALan.cg"
 AlanCode* code; 
#line 618 "alan_parser.hh"

  
}; //end class AlanParser


} //end namespace cppcc


#endif // ifndef __ALAN_PARSER_HH__


/* End of file. */
